#!/usr/perl5/5.18.1/bin/perl

#
# This script is a precursor to generic processing / conversion of memstat data
# into other consumable forms, such as: JSON, TSV, CSV, etc
#
# Things learned here will be translated into proper Moose objects later.
#
# In this spike, we'll be doing some work with TSV, so we can test with D3.js
# visualization.
#
package Solaris::Perf::Import::memstat;

use feature ':5.18';
use feature qw(say);

use Moose;
with 'MooseX::Getopt';

use IO::All;
use Data::Dumper                 qw();
use Solaris::DTF::Stats          qw();
use Solaris::PerfParser::memstat qw();
use IO::File                     qw();


has 'file'     => (is => 'rw', isa => 'Str', required => 1,
                   documentation => 'File containing memstat data to import');
has 'start'    => (is => 'rw', isa => 'Str',
                   predicate => 'has_start',
                   documentation => 'Time to start importing data from (HH:MM:SS)');
has 'end'      => (is => 'rw', isa => 'Str',
                   predicate => 'has_end',
                   documentation => 'Time to   end importing data from (HH:MM:SS)');
has 'hostname' => (is => 'rw', isa => 'Str',
                   documentation => 'Client hostname data came from, if not running this on that host',
                   predicate => 'has_hostname',
                   default => sub { my $self = shift;
                                    my $hostname = qx{/bin/hostname};
                                    chomp($hostname);
                                    return $hostname;
                                  } );
has '_time_zone' => (is => 'rw', isa => 'Str',
                     predicate => 'has_time_zone',
                     default => sub { my $self = shift;
                                      my $tzname = DateTime::TimeZone->new( name => 'local' )->name;
                                      return $tzname;
                                    } );
has 'server'   => (is => 'rw', isa => 'Str',
                   documentation => 'Server to upload the data to, if not the default');
has 'port'     => (is => 'rw', isa => 'Str',
                   documentation => 'Port to upload data to on the Server, if not the default');

sub BUILD {
  my $self = shift;

  # Need to set a hostname that we're importing as - default to 
  unless ($self->has_hostname) {
    die "need a hostname!";
  }
  my $hostname = $self->hostname;
  my $tzname   = $self->_time_zone;
  say "Collecting data for $hostname, in [$tzname] time zone";
}

sub import {
  my ($self) = shift;

  my $tzname = $self->_time_zone;
  my ($start_dt, $end_dt, $fh);
  my $file = $self->file;

  if ($self->has_start) {
    $start_dt =
      Solaris::DTF::Stats->parse_datetime($self->start)->set_time_zone($tzname);
  }

  if ($self->has_end) {
    $end_dt   =
      Solaris::DTF::Stats->parse_datetime($self->end)->set_time_zone($tzname);
  }

  # Disable autoclose on IO:All, since we may need to keep the file open
  # till the bitter end.
  my $io   = IO::All->new($file)->autoclose(0)->tie;
  my $mime_type = defined($io->mimetype) ? $io->mimetype :
                                           "";

  # Handle bzip2 compressed files
  if ($mime_type eq 'application/x-bzip') {
    $fh = IO::Uncompress::Bunzip2->new($file) or
      die "Unable to open bzip2 file: $file";
  } else {
    $fh = $io;
  }

  my %parser_args = ( datastream => $fh,
                      defined($start_dt)  ? (start => $start_dt) : (),
                      defined($end_dt)    ? (end   => $end_dt)   : ()
                    );

  my $p = Solaris::PerfParser::memstat->new( %parser_args );

  my ($records,@data_array);
  my @header_labels =
    qw( datetime
        anon
        exec_and_libs
        free_cachelist
        free_freelist
        guest
        kernel
        page_cache
        zfs_file_data
        zfs_metadata
        total
      );

  my $tsv = IO::File->new("/tmp/memstat.tsv",">") or
    die "Unable to open TSV file";

  my $msg = sprintf(join("\t", ('%s') x 11) . "\n", @header_labels );
  say $msg;

  $tsv->print( $msg );
 
  while (my $d = $p->next) {
    $records++;

    my @line = map { exists $_->{bytes} ?
                     $_->{bytes} :
                     ref($_) eq "DateTime" ? $_->strftime("%F %H:%M:%S") : '' }
               @{$d}{@header_labels};
    my $line = sprintf("%s\t" . join("\t", ('%d') x 10) . "\n", @line);

    $tsv->print( $line );

    if (($records % 1000) == 0) {
      @data_array = ();
      say "Processed $records records";
      say Data::Dumper::Dumper( $d );
    }
  }
  say "Processed a total of $records records";
}

package main;

use strict;
use warnings;

use IO::All                      qw();
use DateTime                     qw();
use Getopt::Long                 qw();
use Fcntl                        qw(SEEK_SET);
use DateTime                     qw();
use DateTime::TimeZone           qw();
use DateTime::Format::Strptime   qw();
use LWP::UserAgent               qw();
use HTTP::Request::Common        qw( POST PUT );
use FindBin                      qw();
use URI::Escape                  qw();
use IO::Uncompress::Bunzip2      qw();
use Carp                         qw(croak);

use lib "$FindBin::Bin/../lib";

my $app = Solaris::Perf::Import::memstat->new_with_options();

$app->import;




